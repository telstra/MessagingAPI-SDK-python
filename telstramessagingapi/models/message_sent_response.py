# -*- coding: utf-8 -*-

"""
    telstramessagingapi.models.message_sent_response

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
"""
import telstramessagingapi.models.message

class MessageSentResponse(object):

    """Implementation of the 'MessageSentResponse' model.

    TODO: type model description here.

    Attributes:
        messages (list of Message): TODO: type description here.
        message_type (string): TODO: type description here.
        number_segments (int): TODO: type description here.
        number_destinations (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "messages" : "messages",
        "message_type" : "messageType",
        "number_segments" : "numberSegments",
        "number_destinations" : "numberDestinations"
    }

    def __init__(self,
                 messages=None,
                 message_type=None,
                 number_segments=None,
                 number_destinations=None):
        """Constructor for the MessageSentResponse class"""

        # Initialize members of the class
        self.messages = messages
        self.message_type = message_type
        self.number_segments = number_segments
        self.number_destinations = number_destinations


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        messages = None
        if dictionary.get("messages") != None:
            messages = list()
            for structure in dictionary.get("messages"):
                messages.append(telstramessagingapi.models.message.Message.from_dictionary(structure))
        message_type = dictionary.get("messageType")
        number_segments = dictionary.get("numberSegments")
        number_destinations = dictionary.get("numberDestinations")

        # Return an object of this model
        return cls(messages,
                   message_type,
                   number_segments,
                   number_destinations)


