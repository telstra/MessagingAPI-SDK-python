# -*- coding: utf-8 -*-

"""
    telstramessagingapi.controllers.provisioning_controller

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.o_auth_2 import OAuth2
from ..models.provision_number_response import ProvisionNumberResponse
from ..exceptions.error_error_error_62_error_exception import ErrorErrorError62ErrorException

class ProvisioningController(BaseController):

    """A Controller to access Endpoints in the telstramessagingapi API."""


    def delete_subscription(self):
        """Does a DELETE request to /messages/provisioning/subscriptions.

        Delete Subscription

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/messages/provisioning/subscriptions'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.http_client.delete(_query_url)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ErrorErrorError62ErrorException('Invalid or missing request parameters', _context)
        elif _context.response.status_code == 401:
            raise ErrorErrorError62ErrorException('Invalid or no credentials passed in the request', _context)
        elif _context.response.status_code == 403:
            raise ErrorErrorError62ErrorException('Authorization credentials passed and accepted but account does not have permission', _context)
        elif _context.response.status_code == 404:
            raise ErrorErrorError62ErrorException('The requested URI does not exist', _context)
        elif (_context.response.status_code < 200) or (_context.response.status_code > 208): 
            raise ErrorErrorError62ErrorException('An internal error occurred when processing the request', _context)
        self.validate_response(_context)

    def create_subscription(self,
                            body):
        """Does a POST request to /messages/provisioning/subscriptions.

        Create Subscription

        Args:
            body (ProvisionNumberRequest): A JSON payload containing the
                required attributes

        Returns:
            ProvisionNumberResponse: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/messages/provisioning/subscriptions'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        OAuth2.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ErrorErrorError62ErrorException('Invalid or missing request parameters', _context)
        elif _context.response.status_code == 401:
            raise ErrorErrorError62ErrorException('Invalid or no credentials passed in the request', _context)
        elif _context.response.status_code == 403:
            raise ErrorErrorError62ErrorException('Authorization credentials passed and accepted but account does not have permission', _context)
        elif _context.response.status_code == 404:
            raise ErrorErrorError62ErrorException('The requested URI does not exist', _context)
        elif (_context.response.status_code < 200) or (_context.response.status_code > 208): 
            raise ErrorErrorError62ErrorException('An internal error occurred when processing the request', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ProvisionNumberResponse.from_dictionary)

    def get_subscription(self):
        """Does a GET request to /messages/provisioning/subscriptions.

        Get Subscription

        Returns:
            ProvisionNumberResponse: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/messages/provisioning/subscriptions'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ErrorErrorError62ErrorException('Invalid or missing request parameters', _context)
        elif _context.response.status_code == 401:
            raise ErrorErrorError62ErrorException('Invalid or no credentials passed in the request', _context)
        elif _context.response.status_code == 403:
            raise ErrorErrorError62ErrorException('Authorization credentials passed and accepted but account does not have permission', _context)
        elif _context.response.status_code == 404:
            raise ErrorErrorError62ErrorException('The requested URI does not exist', _context)
        elif (_context.response.status_code < 200) or (_context.response.status_code > 208): 
            raise ErrorErrorError62ErrorException('An internal error occurred when processing the request', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ProvisionNumberResponse.from_dictionary)
