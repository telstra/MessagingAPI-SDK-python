# coding: utf-8

"""
    Telstra Messaging API

    The API specification for Telstra Messaging API  # noqa: E501

    The version of the OpenAPI document: 2.2.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from Telstra_Messaging.configuration import Configuration


class SendSmsMultiRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sms_multi': 'list[MessageMulti]',
        'notiy_url': 'str'
    }

    attribute_map = {
        'sms_multi': 'smsMulti',
        'notiy_url': 'notiyURL'
    }

    def __init__(self, sms_multi=None, notiy_url=None, local_vars_configuration=None):  # noqa: E501
        """SendSmsMultiRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._sms_multi = None
        self._notiy_url = None
        self.discriminator = None

        if sms_multi is not None:
            self.sms_multi = sms_multi
        if notiy_url is not None:
            self.notiy_url = notiy_url

    @property
    def sms_multi(self):
        """Gets the sms_multi of this SendSmsMultiRequest.  # noqa: E501

        Multiple SMS. Up to 10 messages can be sent in one API call.  # noqa: E501

        :return: The sms_multi of this SendSmsMultiRequest.  # noqa: E501
        :rtype: list[MessageMulti]
        """
        return self._sms_multi

    @sms_multi.setter
    def sms_multi(self, sms_multi):
        """Sets the sms_multi of this SendSmsMultiRequest.

        Multiple SMS. Up to 10 messages can be sent in one API call.  # noqa: E501

        :param sms_multi: The sms_multi of this SendSmsMultiRequest.  # noqa: E501
        :type: list[MessageMulti]
        """

        self._sms_multi = sms_multi

    @property
    def notiy_url(self):
        """Gets the notiy_url of this SendSmsMultiRequest.  # noqa: E501

        Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc. Please refer to the Delivery Status section for more information.  If you are using a domain URL you must include the forward slash at the end of the URL (e.g. http://www.example.com/).   # noqa: E501

        :return: The notiy_url of this SendSmsMultiRequest.  # noqa: E501
        :rtype: str
        """
        return self._notiy_url

    @notiy_url.setter
    def notiy_url(self, notiy_url):
        """Sets the notiy_url of this SendSmsMultiRequest.

        Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc. Please refer to the Delivery Status section for more information.  If you are using a domain URL you must include the forward slash at the end of the URL (e.g. http://www.example.com/).   # noqa: E501

        :param notiy_url: The notiy_url of this SendSmsMultiRequest.  # noqa: E501
        :type: str
        """

        self._notiy_url = notiy_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendSmsMultiRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SendSmsMultiRequest):
            return True

        return self.to_dict() != other.to_dict()
