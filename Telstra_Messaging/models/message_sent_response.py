# coding: utf-8

"""
    Telstra Messaging API

     The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages.   # noqa: E501

    OpenAPI spec version: 2.2.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Telstra_Messaging.models.message import Message  # noqa: F401,E501


class MessageSentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'messages': 'list[Message]',
        'message_type': 'str',
        'number_segments': 'int',
        'number_national_destinations': 'int',
        'number_international_destinations': 'int'
    }

    attribute_map = {
        'messages': 'messages',
        'message_type': 'messageType',
        'number_segments': 'numberSegments',
        'number_national_destinations': 'NumberNationalDestinations',
        'number_international_destinations': 'NumberInternationalDestinations'
    }

    def __init__(self, messages=None, message_type=None, number_segments=None, number_national_destinations=None, number_international_destinations=None):  # noqa: E501
        """MessageSentResponse - a model defined in Swagger"""  # noqa: E501

        self._messages = None
        self._message_type = None
        self._number_segments = None
        self._number_national_destinations = None
        self._number_international_destinations = None
        self.discriminator = None

        self.messages = messages
        self.message_type = message_type
        self.number_segments = number_segments
        if number_national_destinations is not None:
            self.number_national_destinations = number_national_destinations
        if number_international_destinations is not None:
            self.number_international_destinations = number_international_destinations

    @property
    def messages(self):
        """Gets the messages of this MessageSentResponse.  # noqa: E501

          # noqa: E501

        :return: The messages of this MessageSentResponse.  # noqa: E501
        :rtype: list[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this MessageSentResponse.

          # noqa: E501

        :param messages: The messages of this MessageSentResponse.  # noqa: E501
        :type: list[Message]
        """
        if messages is None:
            raise ValueError("Invalid value for `messages`, must not be `None`")  # noqa: E501

        self._messages = messages

    @property
    def message_type(self):
        """Gets the message_type of this MessageSentResponse.  # noqa: E501

          # noqa: E501

        :return: The message_type of this MessageSentResponse.  # noqa: E501
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this MessageSentResponse.

          # noqa: E501

        :param message_type: The message_type of this MessageSentResponse.  # noqa: E501
        :type: str
        """
        if message_type is None:
            raise ValueError("Invalid value for `message_type`, must not be `None`")  # noqa: E501

        self._message_type = message_type

    @property
    def number_segments(self):
        """Gets the number_segments of this MessageSentResponse.  # noqa: E501

          # noqa: E501

        :return: The number_segments of this MessageSentResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_segments

    @number_segments.setter
    def number_segments(self, number_segments):
        """Sets the number_segments of this MessageSentResponse.

          # noqa: E501

        :param number_segments: The number_segments of this MessageSentResponse.  # noqa: E501
        :type: int
        """
        if number_segments is None:
            raise ValueError("Invalid value for `number_segments`, must not be `None`")  # noqa: E501

        self._number_segments = number_segments

    @property
    def number_national_destinations(self):
        """Gets the number_national_destinations of this MessageSentResponse.  # noqa: E501

          # noqa: E501

        :return: The number_national_destinations of this MessageSentResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_national_destinations

    @number_national_destinations.setter
    def number_national_destinations(self, number_national_destinations):
        """Sets the number_national_destinations of this MessageSentResponse.

          # noqa: E501

        :param number_national_destinations: The number_national_destinations of this MessageSentResponse.  # noqa: E501
        :type: int
        """

        self._number_national_destinations = number_national_destinations

    @property
    def number_international_destinations(self):
        """Gets the number_international_destinations of this MessageSentResponse.  # noqa: E501

          # noqa: E501

        :return: The number_international_destinations of this MessageSentResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_international_destinations

    @number_international_destinations.setter
    def number_international_destinations(self, number_international_destinations):
        """Sets the number_international_destinations of this MessageSentResponse.

          # noqa: E501

        :param number_international_destinations: The number_international_destinations of this MessageSentResponse.  # noqa: E501
        :type: int
        """

        self._number_international_destinations = number_international_destinations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageSentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
