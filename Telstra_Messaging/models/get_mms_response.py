# coding: utf-8

"""
    Telstra Messaging API

    The API specification for Telstra Messaging API  # noqa: E501

    The version of the OpenAPI document: 2.2.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from Telstra_Messaging.configuration import Configuration


class GetMmsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'destination_address': 'str',
        'sender_address': 'str',
        'subject': 'str',
        'message_id': 'str',
        'api_msg_id': 'str',
        'sent_timestamp': 'str',
        'mms_content': 'list[MMSContent]'
    }

    attribute_map = {
        'status': 'status',
        'destination_address': 'destinationAddress',
        'sender_address': 'senderAddress',
        'subject': 'subject',
        'message_id': 'messageId',
        'api_msg_id': 'apiMsgId',
        'sent_timestamp': 'sentTimestamp',
        'mms_content': 'MMSContent'
    }

    def __init__(self, status=None, destination_address=None, sender_address=None, subject=None, message_id=None, api_msg_id=None, sent_timestamp=None, mms_content=None, local_vars_configuration=None):  # noqa: E501
        """GetMmsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._destination_address = None
        self._sender_address = None
        self._subject = None
        self._message_id = None
        self._api_msg_id = None
        self._sent_timestamp = None
        self._mms_content = None
        self.discriminator = None

        self.status = status
        self.destination_address = destination_address
        self.sender_address = sender_address
        if subject is not None:
            self.subject = subject
        if message_id is not None:
            self.message_id = message_id
        if api_msg_id is not None:
            self.api_msg_id = api_msg_id
        self.sent_timestamp = sent_timestamp
        self.mms_content = mms_content

    @property
    def status(self):
        """Gets the status of this GetMmsResponse.  # noqa: E501

        The final state of the message.   # noqa: E501

        :return: The status of this GetMmsResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetMmsResponse.

        The final state of the message.   # noqa: E501

        :param status: The status of this GetMmsResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def destination_address(self):
        """Gets the destination_address of this GetMmsResponse.  # noqa: E501

        The number the message was sent to.   # noqa: E501

        :return: The destination_address of this GetMmsResponse.  # noqa: E501
        :rtype: str
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this GetMmsResponse.

        The number the message was sent to.   # noqa: E501

        :param destination_address: The destination_address of this GetMmsResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and destination_address is None:  # noqa: E501
            raise ValueError("Invalid value for `destination_address`, must not be `None`")  # noqa: E501

        self._destination_address = destination_address

    @property
    def sender_address(self):
        """Gets the sender_address of this GetMmsResponse.  # noqa: E501

        The number the message was sent from.   # noqa: E501

        :return: The sender_address of this GetMmsResponse.  # noqa: E501
        :rtype: str
        """
        return self._sender_address

    @sender_address.setter
    def sender_address(self, sender_address):
        """Sets the sender_address of this GetMmsResponse.

        The number the message was sent from.   # noqa: E501

        :param sender_address: The sender_address of this GetMmsResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and sender_address is None:  # noqa: E501
            raise ValueError("Invalid value for `sender_address`, must not be `None`")  # noqa: E501

        self._sender_address = sender_address

    @property
    def subject(self):
        """Gets the subject of this GetMmsResponse.  # noqa: E501

        The subject assigned to the message.   # noqa: E501

        :return: The subject of this GetMmsResponse.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this GetMmsResponse.

        The subject assigned to the message.   # noqa: E501

        :param subject: The subject of this GetMmsResponse.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def message_id(self):
        """Gets the message_id of this GetMmsResponse.  # noqa: E501

        Message Id assigned by the MMSC.   # noqa: E501

        :return: The message_id of this GetMmsResponse.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this GetMmsResponse.

        Message Id assigned by the MMSC.   # noqa: E501

        :param message_id: The message_id of this GetMmsResponse.  # noqa: E501
        :type: str
        """

        self._message_id = message_id

    @property
    def api_msg_id(self):
        """Gets the api_msg_id of this GetMmsResponse.  # noqa: E501

        Message Id assigned by the API.   # noqa: E501

        :return: The api_msg_id of this GetMmsResponse.  # noqa: E501
        :rtype: str
        """
        return self._api_msg_id

    @api_msg_id.setter
    def api_msg_id(self, api_msg_id):
        """Sets the api_msg_id of this GetMmsResponse.

        Message Id assigned by the API.   # noqa: E501

        :param api_msg_id: The api_msg_id of this GetMmsResponse.  # noqa: E501
        :type: str
        """

        self._api_msg_id = api_msg_id

    @property
    def sent_timestamp(self):
        """Gets the sent_timestamp of this GetMmsResponse.  # noqa: E501

        Time handling of the message ended.   # noqa: E501

        :return: The sent_timestamp of this GetMmsResponse.  # noqa: E501
        :rtype: str
        """
        return self._sent_timestamp

    @sent_timestamp.setter
    def sent_timestamp(self, sent_timestamp):
        """Sets the sent_timestamp of this GetMmsResponse.

        Time handling of the message ended.   # noqa: E501

        :param sent_timestamp: The sent_timestamp of this GetMmsResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and sent_timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `sent_timestamp`, must not be `None`")  # noqa: E501

        self._sent_timestamp = sent_timestamp

    @property
    def mms_content(self):
        """Gets the mms_content of this GetMmsResponse.  # noqa: E501

        An array of content that was received in an MMS message.   # noqa: E501

        :return: The mms_content of this GetMmsResponse.  # noqa: E501
        :rtype: list[MMSContent]
        """
        return self._mms_content

    @mms_content.setter
    def mms_content(self, mms_content):
        """Sets the mms_content of this GetMmsResponse.

        An array of content that was received in an MMS message.   # noqa: E501

        :param mms_content: The mms_content of this GetMmsResponse.  # noqa: E501
        :type: list[MMSContent]
        """
        if self.local_vars_configuration.client_side_validation and mms_content is None:  # noqa: E501
            raise ValueError("Invalid value for `mms_content`, must not be `None`")  # noqa: E501

        self._mms_content = mms_content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetMmsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetMmsResponse):
            return True

        return self.to_dict() != other.to_dict()
