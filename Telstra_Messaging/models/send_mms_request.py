# coding: utf-8

"""
    Telstra Messaging API

     The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages.   # noqa: E501

    OpenAPI spec version: 2.2.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Telstra_Messaging.models.mms_content import MMSContent  # noqa: F401,E501


class SendMmsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'str',
        'to': 'str',
        'subject': 'str',
        'reply_request': 'bool',
        'mms_content': 'list[MMSContent]'
    }

    attribute_map = {
        '_from': 'from',
        'to': 'to',
        'subject': 'subject',
        'reply_request': 'replyRequest',
        'mms_content': 'MMSContent'
    }

    def __init__(self, _from=None, to=None, subject=None, reply_request=None, mms_content=None):  # noqa: E501
        """SendMmsRequest - a model defined in Swagger"""  # noqa: E501

        self.__from = None
        self._to = None
        self._subject = None
        self._reply_request = None
        self._mms_content = None
        self.discriminator = None

        self._from = _from
        self.to = to
        self.subject = subject
        self.reply_request = reply_request
        self.mms_content = mms_content

    @property
    def _from(self):
        """Gets the _from of this SendMmsRequest.  # noqa: E501

        This will be the source address that will be displayed on the receiving device. If it is not present then it will default to the MSISDN assigned to the app. If replyRequest is set to true, then this field will be ignored.  # noqa: E501

        :return: The _from of this SendMmsRequest.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this SendMmsRequest.

        This will be the source address that will be displayed on the receiving device. If it is not present then it will default to the MSISDN assigned to the app. If replyRequest is set to true, then this field will be ignored.  # noqa: E501

        :param _from: The _from of this SendMmsRequest.  # noqa: E501
        :type: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this SendMmsRequest.  # noqa: E501

        This is the destination address.  # noqa: E501

        :return: The to of this SendMmsRequest.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SendMmsRequest.

        This is the destination address.  # noqa: E501

        :param to: The to of this SendMmsRequest.  # noqa: E501
        :type: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def subject(self):
        """Gets the subject of this SendMmsRequest.  # noqa: E501

        The subject that will be used in an MMS message.  # noqa: E501

        :return: The subject of this SendMmsRequest.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SendMmsRequest.

        The subject that will be used in an MMS message.  # noqa: E501

        :param subject: The subject of this SendMmsRequest.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def reply_request(self):
        """Gets the reply_request of this SendMmsRequest.  # noqa: E501

        If set to true, the reply message functionality will be implemented and the to address will be ignored if present.  # noqa: E501

        :return: The reply_request of this SendMmsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._reply_request

    @reply_request.setter
    def reply_request(self, reply_request):
        """Sets the reply_request of this SendMmsRequest.

        If set to true, the reply message functionality will be implemented and the to address will be ignored if present.  # noqa: E501

        :param reply_request: The reply_request of this SendMmsRequest.  # noqa: E501
        :type: bool
        """
        if reply_request is None:
            raise ValueError("Invalid value for `reply_request`, must not be `None`")  # noqa: E501

        self._reply_request = reply_request

    @property
    def mms_content(self):
        """Gets the mms_content of this SendMmsRequest.  # noqa: E501

        An Array of content that will be sent in an MMS message. If this array is present it will cause the “body” element to be ignored, and the message will be sent as an MMS.  # noqa: E501

        :return: The mms_content of this SendMmsRequest.  # noqa: E501
        :rtype: list[MMSContent]
        """
        return self._mms_content

    @mms_content.setter
    def mms_content(self, mms_content):
        """Sets the mms_content of this SendMmsRequest.

        An Array of content that will be sent in an MMS message. If this array is present it will cause the “body” element to be ignored, and the message will be sent as an MMS.  # noqa: E501

        :param mms_content: The mms_content of this SendMmsRequest.  # noqa: E501
        :type: list[MMSContent]
        """
        if mms_content is None:
            raise ValueError("Invalid value for `mms_content`, must not be `None`")  # noqa: E501

        self._mms_content = mms_content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendMmsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
