# coding: utf-8

"""
    Telstra Messaging API

     The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages.   # noqa: E501

    OpenAPI spec version: 2.2.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InboundPollResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'destination_address': 'str',
        'sender_address': 'str',
        'message': 'str',
        'message_id': 'str',
        'sent_timestamp': 'str'
    }

    attribute_map = {
        'status': 'status',
        'destination_address': 'destinationAddress',
        'sender_address': 'senderAddress',
        'message': 'message',
        'message_id': 'messageId',
        'sent_timestamp': 'sentTimestamp'
    }

    def __init__(self, status=None, destination_address=None, sender_address=None, message=None, message_id=None, sent_timestamp=None):  # noqa: E501
        """InboundPollResponse - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._destination_address = None
        self._sender_address = None
        self._message = None
        self._message_id = None
        self._sent_timestamp = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if destination_address is not None:
            self.destination_address = destination_address
        if sender_address is not None:
            self.sender_address = sender_address
        if message is not None:
            self.message = message
        if message_id is not None:
            self.message_id = message_id
        if sent_timestamp is not None:
            self.sent_timestamp = sent_timestamp

    @property
    def status(self):
        """Gets the status of this InboundPollResponse.  # noqa: E501

        message status  # noqa: E501

        :return: The status of this InboundPollResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InboundPollResponse.

        message status  # noqa: E501

        :param status: The status of this InboundPollResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def destination_address(self):
        """Gets the destination_address of this InboundPollResponse.  # noqa: E501

        The phone number (recipient) that the message was sent to(in E.164 format).  # noqa: E501

        :return: The destination_address of this InboundPollResponse.  # noqa: E501
        :rtype: str
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this InboundPollResponse.

        The phone number (recipient) that the message was sent to(in E.164 format).  # noqa: E501

        :param destination_address: The destination_address of this InboundPollResponse.  # noqa: E501
        :type: str
        """

        self._destination_address = destination_address

    @property
    def sender_address(self):
        """Gets the sender_address of this InboundPollResponse.  # noqa: E501

        The phone number (sender) that the message was sent from (in E.164 format).  # noqa: E501

        :return: The sender_address of this InboundPollResponse.  # noqa: E501
        :rtype: str
        """
        return self._sender_address

    @sender_address.setter
    def sender_address(self, sender_address):
        """Sets the sender_address of this InboundPollResponse.

        The phone number (sender) that the message was sent from (in E.164 format).  # noqa: E501

        :param sender_address: The sender_address of this InboundPollResponse.  # noqa: E501
        :type: str
        """

        self._sender_address = sender_address

    @property
    def message(self):
        """Gets the message of this InboundPollResponse.  # noqa: E501

        Text of the message that was sent  # noqa: E501

        :return: The message of this InboundPollResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InboundPollResponse.

        Text of the message that was sent  # noqa: E501

        :param message: The message of this InboundPollResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def message_id(self):
        """Gets the message_id of this InboundPollResponse.  # noqa: E501

        Message Id  # noqa: E501

        :return: The message_id of this InboundPollResponse.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this InboundPollResponse.

        Message Id  # noqa: E501

        :param message_id: The message_id of this InboundPollResponse.  # noqa: E501
        :type: str
        """

        self._message_id = message_id

    @property
    def sent_timestamp(self):
        """Gets the sent_timestamp of this InboundPollResponse.  # noqa: E501

        The date and time when the message was sent by recipient.  # noqa: E501

        :return: The sent_timestamp of this InboundPollResponse.  # noqa: E501
        :rtype: str
        """
        return self._sent_timestamp

    @sent_timestamp.setter
    def sent_timestamp(self, sent_timestamp):
        """Sets the sent_timestamp of this InboundPollResponse.

        The date and time when the message was sent by recipient.  # noqa: E501

        :param sent_timestamp: The sent_timestamp of this InboundPollResponse.  # noqa: E501
        :type: str
        """

        self._sent_timestamp = sent_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InboundPollResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
