# coding: utf-8

"""
    Telstra Messaging API

     The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages.   # noqa: E501

    OpenAPI spec version: 2.2.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeleteNumberRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'empty_arr': 'int'
    }

    attribute_map = {
        'empty_arr': 'emptyArr'
    }

    def __init__(self, empty_arr=0):  # noqa: E501
        """DeleteNumberRequest - a model defined in Swagger"""  # noqa: E501

        self._empty_arr = None
        self.discriminator = None

        if empty_arr is not None:
            self.empty_arr = empty_arr

    @property
    def empty_arr(self):
        """Gets the empty_arr of this DeleteNumberRequest.  # noqa: E501

        Empty Arr  # noqa: E501

        :return: The empty_arr of this DeleteNumberRequest.  # noqa: E501
        :rtype: int
        """
        return self._empty_arr

    @empty_arr.setter
    def empty_arr(self, empty_arr):
        """Sets the empty_arr of this DeleteNumberRequest.

        Empty Arr  # noqa: E501

        :param empty_arr: The empty_arr of this DeleteNumberRequest.  # noqa: E501
        :type: int
        """

        self._empty_arr = empty_arr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeleteNumberRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
