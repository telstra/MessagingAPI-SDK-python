# coding: utf-8

"""
    Telstra Messaging API

     The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages.   # noqa: E501

    OpenAPI spec version: 2.2.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProvisionNumberRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_days': 'int',
        'notify_url': 'str'
    }

    attribute_map = {
        'active_days': 'activeDays',
        'notify_url': 'notifyURL'
    }

    def __init__(self, active_days=None, notify_url=None):  # noqa: E501
        """ProvisionNumberRequest - a model defined in Swagger"""  # noqa: E501

        self._active_days = None
        self._notify_url = None
        self.discriminator = None

        if active_days is not None:
            self.active_days = active_days
        if notify_url is not None:
            self.notify_url = notify_url

    @property
    def active_days(self):
        """Gets the active_days of this ProvisionNumberRequest.  # noqa: E501

        Number of active days  # noqa: E501

        :return: The active_days of this ProvisionNumberRequest.  # noqa: E501
        :rtype: int
        """
        return self._active_days

    @active_days.setter
    def active_days(self, active_days):
        """Sets the active_days of this ProvisionNumberRequest.

        Number of active days  # noqa: E501

        :param active_days: The active_days of this ProvisionNumberRequest.  # noqa: E501
        :type: int
        """

        self._active_days = active_days

    @property
    def notify_url(self):
        """Gets the notify_url of this ProvisionNumberRequest.  # noqa: E501

        Notify url  # noqa: E501

        :return: The notify_url of this ProvisionNumberRequest.  # noqa: E501
        :rtype: str
        """
        return self._notify_url

    @notify_url.setter
    def notify_url(self, notify_url):
        """Sets the notify_url of this ProvisionNumberRequest.

        Notify url  # noqa: E501

        :param notify_url: The notify_url of this ProvisionNumberRequest.  # noqa: E501
        :type: str
        """

        self._notify_url = notify_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvisionNumberRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
