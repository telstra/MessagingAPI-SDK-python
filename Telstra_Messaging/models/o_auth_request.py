# coding: utf-8

"""
    Telstra Messaging API

     The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages.   # noqa: E501

    OpenAPI spec version: 2.2.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OAuthRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'client_secret': 'str',
        'grant_type': 'str',
        'scopes': 'str'
    }

    attribute_map = {
        'client_id': 'client_id',
        'client_secret': 'client_secret',
        'grant_type': 'grant_type',
        'scopes': 'scopes'
    }

    def __init__(self, client_id=None, client_secret=None, grant_type=None, scopes=None):  # noqa: E501
        """OAuthRequest - a model defined in Swagger"""  # noqa: E501

        self._client_id = None
        self._client_secret = None
        self._grant_type = None
        self._scopes = None
        self.discriminator = None

        self.client_id = client_id
        self.client_secret = client_secret
        self.grant_type = grant_type
        self.scopes = scopes

    @property
    def client_id(self):
        """Gets the client_id of this OAuthRequest.  # noqa: E501

        Client id  # noqa: E501

        :return: The client_id of this OAuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OAuthRequest.

        Client id  # noqa: E501

        :param client_id: The client_id of this OAuthRequest.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this OAuthRequest.  # noqa: E501

        Client secret  # noqa: E501

        :return: The client_secret of this OAuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this OAuthRequest.

        Client secret  # noqa: E501

        :param client_secret: The client_secret of this OAuthRequest.  # noqa: E501
        :type: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")  # noqa: E501

        self._client_secret = client_secret

    @property
    def grant_type(self):
        """Gets the grant_type of this OAuthRequest.  # noqa: E501

        OAuth grant type  # noqa: E501

        :return: The grant_type of this OAuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this OAuthRequest.

        OAuth grant type  # noqa: E501

        :param grant_type: The grant_type of this OAuthRequest.  # noqa: E501
        :type: str
        """
        if grant_type is None:
            raise ValueError("Invalid value for `grant_type`, must not be `None`")  # noqa: E501

        self._grant_type = grant_type

    @property
    def scopes(self):
        """Gets the scopes of this OAuthRequest.  # noqa: E501

        OAuth scope  # noqa: E501

        :return: The scopes of this OAuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this OAuthRequest.

        OAuth scope  # noqa: E501

        :param scopes: The scopes of this OAuthRequest.  # noqa: E501
        :type: str
        """
        if scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")  # noqa: E501

        self._scopes = scopes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuthRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
