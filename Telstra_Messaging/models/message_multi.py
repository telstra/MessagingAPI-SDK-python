# coding: utf-8

"""
    Telstra Messaging API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.2.10
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from Telstra_Messaging.configuration import Configuration


class MessageMulti(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'to': 'str',
        'body': 'str',
        'receipt_off': 'bool'
    }

    attribute_map = {
        'to': 'to',
        'body': 'body',
        'receipt_off': 'receiptOff'
    }

    def __init__(self, to=None, body=None, receipt_off=None, local_vars_configuration=None):  # noqa: E501
        """MessageMulti - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._to = None
        self._body = None
        self._receipt_off = None
        self.discriminator = None

        if to is not None:
            self.to = to
        if body is not None:
            self.body = body
        if receipt_off is not None:
            self.receipt_off = receipt_off

    @property
    def to(self):
        """Gets the to of this MessageMulti.  # noqa: E501

        Phone number (in E.164 format) to send the SMS to. This number can be in international format `\"to\": \"+61412345678\"` or in national format.   # noqa: E501

        :return: The to of this MessageMulti.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this MessageMulti.

        Phone number (in E.164 format) to send the SMS to. This number can be in international format `\"to\": \"+61412345678\"` or in national format.   # noqa: E501

        :param to: The to of this MessageMulti.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def body(self):
        """Gets the body of this MessageMulti.  # noqa: E501

        The text body of the message. Messages longer than 160 characters will be counted as multiple messages.  This field contains the message text, this can be up to 1900 (for a single recipient) or 500 (for multiple recipients) UTF-8 characters. As mobile devices rarely support the full range of UTF-8 characters, it is possible that some characters may not be translated correctly by the mobile device   # noqa: E501

        :return: The body of this MessageMulti.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this MessageMulti.

        The text body of the message. Messages longer than 160 characters will be counted as multiple messages.  This field contains the message text, this can be up to 1900 (for a single recipient) or 500 (for multiple recipients) UTF-8 characters. As mobile devices rarely support the full range of UTF-8 characters, it is possible that some characters may not be translated correctly by the mobile device   # noqa: E501

        :param body: The body of this MessageMulti.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def receipt_off(self):
        """Gets the receipt_off of this MessageMulti.  # noqa: E501

        Whether Delivery Receipt will be sent back or not.  Setting this field to `true` will disable Delivery Receipts. The `notifyURL` field will be ignored, if there is one in the payload. An \"OLD-NONEXISTANT-MESSAGE-ID\" 400 error will also be returned upon Polling for the SMS Status.   # noqa: E501

        :return: The receipt_off of this MessageMulti.  # noqa: E501
        :rtype: bool
        """
        return self._receipt_off

    @receipt_off.setter
    def receipt_off(self, receipt_off):
        """Sets the receipt_off of this MessageMulti.

        Whether Delivery Receipt will be sent back or not.  Setting this field to `true` will disable Delivery Receipts. The `notifyURL` field will be ignored, if there is one in the payload. An \"OLD-NONEXISTANT-MESSAGE-ID\" 400 error will also be returned upon Polling for the SMS Status.   # noqa: E501

        :param receipt_off: The receipt_off of this MessageMulti.  # noqa: E501
        :type: bool
        """

        self._receipt_off = receipt_off

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageMulti):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MessageMulti):
            return True

        return self.to_dict() != other.to_dict()
