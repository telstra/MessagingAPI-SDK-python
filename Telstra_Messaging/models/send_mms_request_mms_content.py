# coding: utf-8

"""
    Telstra Messaging API

     The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages.   # noqa: E501

    OpenAPI spec version: 2.2.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SendMmsRequestMMSContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'filename': 'str',
        'payload': 'str'
    }

    attribute_map = {
        'type': 'type',
        'filename': 'filename',
        'payload': 'payload'
    }

    def __init__(self, type=None, filename=None, payload=None):  # noqa: E501
        """SendMmsRequestMMSContent - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._filename = None
        self._payload = None
        self.discriminator = None

        self.type = type
        self.filename = filename
        self.payload = payload

    @property
    def type(self):
        """Gets the type of this SendMmsRequestMMSContent.  # noqa: E501

        The following types are supported audio/amr  audio/aac  audio/mp3  audio/mpeg3  audio/mpeg  audio/mpg  audio/wav  audio/3gpp  audio/mp4  image/gif  image/jpeg  image/jpg  image/png  image/bmp  video/mpeg4  video/mp4  video/mpeg  video/3gpp  video/3gp  video/h263  text/plain  text/x-vCard  text/x-vCalendar  # noqa: E501

        :return: The type of this SendMmsRequestMMSContent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SendMmsRequestMMSContent.

        The following types are supported audio/amr  audio/aac  audio/mp3  audio/mpeg3  audio/mpeg  audio/mpg  audio/wav  audio/3gpp  audio/mp4  image/gif  image/jpeg  image/jpg  image/png  image/bmp  video/mpeg4  video/mp4  video/mpeg  video/3gpp  video/3gp  video/h263  text/plain  text/x-vCard  text/x-vCalendar  # noqa: E501

        :param type: The type of this SendMmsRequestMMSContent.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def filename(self):
        """Gets the filename of this SendMmsRequestMMSContent.  # noqa: E501

        The file name to be associated with the content. Some devices will display this file name with a placeholder for the content.  # noqa: E501

        :return: The filename of this SendMmsRequestMMSContent.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this SendMmsRequestMMSContent.

        The file name to be associated with the content. Some devices will display this file name with a placeholder for the content.  # noqa: E501

        :param filename: The filename of this SendMmsRequestMMSContent.  # noqa: E501
        :type: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")  # noqa: E501

        self._filename = filename

    @property
    def payload(self):
        """Gets the payload of this SendMmsRequestMMSContent.  # noqa: E501

          # noqa: E501

        :return: The payload of this SendMmsRequestMMSContent.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this SendMmsRequestMMSContent.

          # noqa: E501

        :param payload: The payload of this SendMmsRequestMMSContent.  # noqa: E501
        :type: str
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")  # noqa: E501

        self._payload = payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendMmsRequestMMSContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
