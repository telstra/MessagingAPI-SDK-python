# coding: utf-8

"""
    Telstra Messaging API

    The API specification for Telstra Messaging API  # noqa: E501

    The version of the OpenAPI document: 2.2.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from Telstra_Messaging.configuration import Configuration


class SendSMSRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'to': 'str',
        'body': 'str',
        '_from': 'str',
        'validity': 'int',
        'scheduled_delivery': 'int',
        'notify_url': 'str',
        'reply_request': 'bool',
        'priority': 'bool'
    }

    attribute_map = {
        'to': 'to',
        'body': 'body',
        '_from': 'from',
        'validity': 'validity',
        'scheduled_delivery': 'scheduledDelivery',
        'notify_url': 'notifyURL',
        'reply_request': 'replyRequest',
        'priority': 'priority'
    }

    def __init__(self, to=None, body=None, _from=None, validity=None, scheduled_delivery=None, notify_url=None, reply_request=None, priority=None, local_vars_configuration=None):  # noqa: E501
        """SendSMSRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._to = None
        self._body = None
        self.__from = None
        self._validity = None
        self._scheduled_delivery = None
        self._notify_url = None
        self._reply_request = None
        self._priority = None
        self.discriminator = None

        self.to = to
        self.body = body
        if _from is not None:
            self._from = _from
        if validity is not None:
            self.validity = validity
        if scheduled_delivery is not None:
            self.scheduled_delivery = scheduled_delivery
        if notify_url is not None:
            self.notify_url = notify_url
        if reply_request is not None:
            self.reply_request = reply_request
        if priority is not None:
            self.priority = priority

    @property
    def to(self):
        """Gets the to of this SendSMSRequest.  # noqa: E501

        Phone number (in E.164 format) to send the SMS to. This number can be in international format `\"to\": \"+61412345678\"` or in national format. Can be an array of strings if sending to multiple numbers: `\"to\":[\"+61412345678\", \"+61418765432\"]`   # noqa: E501

        :return: The to of this SendSMSRequest.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SendSMSRequest.

        Phone number (in E.164 format) to send the SMS to. This number can be in international format `\"to\": \"+61412345678\"` or in national format. Can be an array of strings if sending to multiple numbers: `\"to\":[\"+61412345678\", \"+61418765432\"]`   # noqa: E501

        :param to: The to of this SendSMSRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and to is None:  # noqa: E501
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def body(self):
        """Gets the body of this SendSMSRequest.  # noqa: E501

        The text body of the message. Messages longer than 160 characters will be counted as multiple messages. This field contains the message text, this can be up to 1900 (for a single recipient) or 500 (for multiple recipients) UTF-8 characters. As mobile devices rarely support the full range of UTF-8 characters, it is possible that some characters may not be translated correctly by the mobile device   # noqa: E501

        :return: The body of this SendSMSRequest.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this SendSMSRequest.

        The text body of the message. Messages longer than 160 characters will be counted as multiple messages. This field contains the message text, this can be up to 1900 (for a single recipient) or 500 (for multiple recipients) UTF-8 characters. As mobile devices rarely support the full range of UTF-8 characters, it is possible that some characters may not be translated correctly by the mobile device   # noqa: E501

        :param body: The body of this SendSMSRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and body is None:  # noqa: E501
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def _from(self):
        """Gets the _from of this SendSMSRequest.  # noqa: E501

        This will be the source address that will be displayed on the receiving device. You can set an Alphanumeric sender ID of up to 11 characters that the SMS was sent from. Phone numbers in the `from` attribute will be blocked (400-error) to prevent number spoofing.  Most standard ASCII characters are accepted in the alphanumeric `from` attribute, however there are some limitations. The following limitations and characters are allowed in the alphanumeric `from` attribute; any alphabetic character (e.g. `abc`), any number mixed with alphabetic characters (e.g. `123abc`), uppercase and lowercase characters (e.g. `aBc`), any of the following special characters mixed with alphabetic characters are allowed; `~!@#$%^&*()~_~+-={}|[];'?,./` (e.g. `abc~!@`), any combination of lowercase, uppercase, numeric or allowed special characters (e.g. `abc@#123DE`). All other characters, including spaces and extended ASCII characters, are not allowed (e.g. `<>:\"\\`).  If attribute is not present, the service will use the mobile number associated with the application (in E.164 format).  If `replyRequest` is set to true, then this field should not be present.  This feature is only available on Telstra Account paid plans, not through Free Trials or credit card paid plans.  *Please note that Alphanumeric sender ID works for domestic, i.e. Australian, destinations only.*   # noqa: E501

        :return: The _from of this SendSMSRequest.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this SendSMSRequest.

        This will be the source address that will be displayed on the receiving device. You can set an Alphanumeric sender ID of up to 11 characters that the SMS was sent from. Phone numbers in the `from` attribute will be blocked (400-error) to prevent number spoofing.  Most standard ASCII characters are accepted in the alphanumeric `from` attribute, however there are some limitations. The following limitations and characters are allowed in the alphanumeric `from` attribute; any alphabetic character (e.g. `abc`), any number mixed with alphabetic characters (e.g. `123abc`), uppercase and lowercase characters (e.g. `aBc`), any of the following special characters mixed with alphabetic characters are allowed; `~!@#$%^&*()~_~+-={}|[];'?,./` (e.g. `abc~!@`), any combination of lowercase, uppercase, numeric or allowed special characters (e.g. `abc@#123DE`). All other characters, including spaces and extended ASCII characters, are not allowed (e.g. `<>:\"\\`).  If attribute is not present, the service will use the mobile number associated with the application (in E.164 format).  If `replyRequest` is set to true, then this field should not be present.  This feature is only available on Telstra Account paid plans, not through Free Trials or credit card paid plans.  *Please note that Alphanumeric sender ID works for domestic, i.e. Australian, destinations only.*   # noqa: E501

        :param _from: The _from of this SendSMSRequest.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def validity(self):
        """Gets the validity of this SendSMSRequest.  # noqa: E501

        How long the platform should attempt to deliver the message for.  This period is specified in minutes from the message.  Normally if the message cannot be delivered immediately, it will be stored and delivery will be periodically reattempted. The network will attempt to send the message for up to seven days. It is possible to define a period smaller than 7 days by including this parameter and specifying the number of minutes that delivery should be attempted.  e.g.: including `\"validity\": 60` will specify that if a message can't be delivered within the first 60 minutes then the network should stop.   # noqa: E501

        :return: The validity of this SendSMSRequest.  # noqa: E501
        :rtype: int
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this SendSMSRequest.

        How long the platform should attempt to deliver the message for.  This period is specified in minutes from the message.  Normally if the message cannot be delivered immediately, it will be stored and delivery will be periodically reattempted. The network will attempt to send the message for up to seven days. It is possible to define a period smaller than 7 days by including this parameter and specifying the number of minutes that delivery should be attempted.  e.g.: including `\"validity\": 60` will specify that if a message can't be delivered within the first 60 minutes then the network should stop.   # noqa: E501

        :param validity: The validity of this SendSMSRequest.  # noqa: E501
        :type: int
        """

        self._validity = validity

    @property
    def scheduled_delivery(self):
        """Gets the scheduled_delivery of this SendSMSRequest.  # noqa: E501

        How long the platform should wait before attempting to send the message - specified in minutes.  e.g.: If `\"scheduledDelivery\": 120` is included, then the network will not attempt to start message delivery for two hours after the message has been submitted   # noqa: E501

        :return: The scheduled_delivery of this SendSMSRequest.  # noqa: E501
        :rtype: int
        """
        return self._scheduled_delivery

    @scheduled_delivery.setter
    def scheduled_delivery(self, scheduled_delivery):
        """Sets the scheduled_delivery of this SendSMSRequest.

        How long the platform should wait before attempting to send the message - specified in minutes.  e.g.: If `\"scheduledDelivery\": 120` is included, then the network will not attempt to start message delivery for two hours after the message has been submitted   # noqa: E501

        :param scheduled_delivery: The scheduled_delivery of this SendSMSRequest.  # noqa: E501
        :type: int
        """

        self._scheduled_delivery = scheduled_delivery

    @property
    def notify_url(self):
        """Gets the notify_url of this SendSMSRequest.  # noqa: E501

        Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc. Please refer to the Delivery Status section for more information.  If you are using a domain URL you must include the forward slash at the end of the URL (e.g. http://www.example.com/).   # noqa: E501

        :return: The notify_url of this SendSMSRequest.  # noqa: E501
        :rtype: str
        """
        return self._notify_url

    @notify_url.setter
    def notify_url(self, notify_url):
        """Sets the notify_url of this SendSMSRequest.

        Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc. Please refer to the Delivery Status section for more information.  If you are using a domain URL you must include the forward slash at the end of the URL (e.g. http://www.example.com/).   # noqa: E501

        :param notify_url: The notify_url of this SendSMSRequest.  # noqa: E501
        :type: str
        """

        self._notify_url = notify_url

    @property
    def reply_request(self):
        """Gets the reply_request of this SendSMSRequest.  # noqa: E501

        If set to true, the reply message functionality will be implemented. The `from` field should not be present.  If false or not present, then normal message handling is implemented.  When set to true, network will use a temporary number to deliver this message. All messages sent by a mobile to this temporary number will be stored against the same `messageId`. If a `notifyURL` is provided then user replies will be delivered to the URL where `messageId` will be same as `messageId` in the response to the original API request.  This field contains the message text, this can be up to 500 UTF-8 characters. As mobile devices rarely support the full range of UTF-8 characters, it is possible that some characters may not be translated correctly by the mobile device.   # noqa: E501

        :return: The reply_request of this SendSMSRequest.  # noqa: E501
        :rtype: bool
        """
        return self._reply_request

    @reply_request.setter
    def reply_request(self, reply_request):
        """Sets the reply_request of this SendSMSRequest.

        If set to true, the reply message functionality will be implemented. The `from` field should not be present.  If false or not present, then normal message handling is implemented.  When set to true, network will use a temporary number to deliver this message. All messages sent by a mobile to this temporary number will be stored against the same `messageId`. If a `notifyURL` is provided then user replies will be delivered to the URL where `messageId` will be same as `messageId` in the response to the original API request.  This field contains the message text, this can be up to 500 UTF-8 characters. As mobile devices rarely support the full range of UTF-8 characters, it is possible that some characters may not be translated correctly by the mobile device.   # noqa: E501

        :param reply_request: The reply_request of this SendSMSRequest.  # noqa: E501
        :type: bool
        """

        self._reply_request = reply_request

    @property
    def priority(self):
        """Gets the priority of this SendSMSRequest.  # noqa: E501

        When messages are queued up for a number, then it is possible to set where a new message will be placed in the queue. If the priority is set to true then the new message will be placed ahead of all messages with a normal priority. If there are no messages queued for the number, then this parameter has no effect.   # noqa: E501

        :return: The priority of this SendSMSRequest.  # noqa: E501
        :rtype: bool
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SendSMSRequest.

        When messages are queued up for a number, then it is possible to set where a new message will be placed in the queue. If the priority is set to true then the new message will be placed ahead of all messages with a normal priority. If there are no messages queued for the number, then this parameter has no effect.   # noqa: E501

        :param priority: The priority of this SendSMSRequest.  # noqa: E501
        :type: bool
        """

        self._priority = priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendSMSRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SendSMSRequest):
            return True

        return self.to_dict() != other.to_dict()
