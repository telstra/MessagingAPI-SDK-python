name: CI-CD

on:
  push:
    branches:
      - refactor/modernize-sdk

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]
    steps:
      - uses: actions/checkout@v2
      - name: set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: install poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - uses: actions/cache@v2.1.3
        id: cache-poetry
        with:
          path: ~/.virtualenvs
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock', 'poetry.toml') }}
      - name: Configure poetry for ci
        run: |
          poetry config virtualenvs.in-project false --local
          poetry config virtualenvs.path ~/.virtualenvs --local
      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          poetry install --no-root
      - name: run tests
        env:
          VALID_TLS_CLIENT_KEY: ${{ secrets.VALID_TLS_CLIENT_KEY }}
          VALID_TLS_CLIENT_SECRET: ${{ secrets.VALID_TLS_CLIENT_SECRET }}
        run: |
          poetry run pytest || poetry install --no-root && poetry run pytest

  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - uses: pre-commit/action@v2.0.0

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install poetry
        run: pip install poetry
      - uses: actions/cache@v2.1.3
        id: cache-poetry
        with:
          path: ~/.virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock', 'poetry.toml') }}
      - name: Configure poetry for ci
        run: |
          poetry config virtualenvs.in-project false --local
          poetry config virtualenvs.path ~/.virtualenvs --local
      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          poetry install
      - name: Build packages
        run: poetry build
      - name: Upload artifacts for release
        uses: actions/upload-artifact@v2.2.1
        with:
          name: wheel
          path: dist/

  release-required:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.check.outputs.result }}
      project-version: ${{ steps.check.outputs.project-version }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install poetry and package
        run: |
          pip install poetry
          # pip install poetry open-alchemy.package-database
      - name: Check if release is required
        id: check
        run: |
          # RELEASED_VERSION=$(python -c "from importlib.metadata import version;print(version('open-alchemy.package-database'))")
          # echo released version: $RELEASED_VERSION
          RELEASED_VERSION=0.0.0
          PROJECT_VERSION=$(poetry version -s)
          echo project version: $PROJECT_VERSION
          [[ "$RELEASED_VERSION" == "$PROJECT_VERSION"  ]] && RESULT=false || RESULT=true
          echo release required: $RESULT
          echo "::set-output name=project-version::$PROJECT_VERSION"
          echo "::set-output name=result::$RESULT"

  release-test-pypi:
    runs-on: ubuntu-latest
    needs:
      - test
      - build
      - pre-commit
      - release-required
    steps:
      - name: Retrieve packages
        if: needs.release-required.outputs.result == 'true'
        uses: actions/download-artifact@v2.0.7
        with:
          name: wheel
          path: dist/
      - name: Publish distribution ðŸ“¦ to Test PyPI
        if: needs.release-required.outputs.result == 'true'
        uses: pypa/gh-action-pypi-publish@v1.4.1
        with:
          password: ${{ secrets.test_pypi_password_messaging }}
          repository_url: https://test.pypi.org/legacy/

  test-production-test-pypi:
    runs-on: ubuntu-latest
    needs:
      - release-test-pypi
      - release-required
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - name: install dependencies
        env:
          PYPI_MIRROR: https://test.pypi.org/simple/
          VERSION: ${{ needs.release-required.outputs.project-version }}
        working-directory: production-test
        run: |
          pipenv install --dev || sleep 30 && pipenv install --dev || sleep 30 && pipenv install --dev || sleep 30 && pipenv install --dev
      - name: run tests
        working-directory: production-test
        env:
          TLS_CLIENT_KEY: ${{ secrets.VALID_TLS_CLIENT_KEY }}
          TLS_CLIENT_SECRET: ${{ secrets.VALID_TLS_CLIENT_SECRET }}
        run: |
          pipenv run test
